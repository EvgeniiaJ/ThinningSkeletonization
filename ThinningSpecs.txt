        Project: Thinning - Skeletonization
You are to implement the thinning algorithm – the second method to obtain the skeletons
of objects in a given image.

The thinning of an object is like peeling off one layer of object from 4 sides
(north, south, west, and east) in iterations, until the object becomes a skeleton.
An object pixel can be peel off (turn from 1 to 0) needs to meet certain criteria.  

Criteria for thinning from north are: 

1) p (i, j) is 1, an object pixel.

2) p (i, j)’s northern neighbor, p (i-1, j) is 0, a background pixel.

3) at least 4 out of 8 p (i, j)’s 3x3 neighbors are 1, object pixels

4) by turning p (i, j) from object pixel to background pixel, i.e., from 1 to 0, 
p (i, j)’s neighborhood must remain as one 8-connected component.  

For example,
if p (i, j)’s 3 by 3 neighbor as show on the left below
If we would to turn p (i, j) from 1 to 0, the result, as show on the right is NOT GOOD
1  0  1	         1 0 1
0  1  0	  ---->  0 0 0
1  0  1          1 0 1

Because we have turned  p (i, j)’s neighborhood from 1 8-connected component to 4;  
while the example below will be OK.
0  0  1	         0 0 1
0  1  1	  ---->  0 0 1
1  1  0          1 1 0

You may think that you need to check 27 cases for condition 4; the answer is NO.
You only need to check a few configurations of p(i, j)’s neighborhood to determine
whether or not  to turn p (i, j) from 1 to 0   



I. Input: inFile (args[0] / argv [1]):  a binary image 

II. Outputs: 
     a) outFile1 (args[1] / argv [2]):  to store the final thinning result, as an image, with image header.
     
     b) outFile2 (args[2] / argv [3]):  
        - Pretty print the input image with proper caption.
        - Pretty print after completing each cycle;  a cycle is after thinning all sides. 
        with proper caption, i.e., 
         (“result of thinning : cycle – 1”)
